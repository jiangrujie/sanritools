(function($){
  /**
   * scrolltabs 初始化方法
   */
  function init(jq,opts){
    var $tabs = $('<ul class="page-tabs-content"></ul>'),width = opts.width;
    jq.addClass('content-tabs');
    if(opts.fit){
      width = jq.parent().width();
    }else {
      if(opts.width && opts.width.endWidth('%')){
        width = jq.parent().width() * opts.width.substring(0,(opts.width.length() -2));
      }
    }
    opts.width = width;    //这个宽度为显示区宽度
    jq.css({
      width:width
    });
    jq.append('<button class="tabs-nav nav-left"><i class="fa icon-backward"></i></button>');
    var $pageTabs = $('<div class="page-tabs clearfix"></div>').appendTo(jq);
    jq.append('<button class="tabs-nav nav-right"><i class="fa icon-forward"></i></button>');
    $pageTabs.append($tabs);
    
    //计算标签页显示区宽度
    var btnSumWidth = 0;
    elsWidth($('.tabs-nav',jq));
    
    return {
      tabs:$tabs,
      showWidth:(width - btnSumWidth)
    }
  }
  /**
   * 新增标签页
   * 支持以对象方式增加和 以id,标题方式增加
   * 建议以对象方式增加
   */
  function addTab(jq,tab,title){
    var state = jq.data('scrolltabs'), //$.data(jq[0],'scrolltabs'),
        $tabs = state.tabs,
        opts = state.opts;
    
    var currentTab = tab;
    if(typeof tab == 'object'){
      opts.tabs.push(tab);
    }else if(typeof tab == 'string'){
      var _tab = {id:tab,title:title};
      opts.tabs.push(_tab);
      currentTab = _tab;
    }
    var $li = $('<li title="'+currentTab.title+'" tabId="'+currentTab.id+'" tabIndex="'+currentTab.index+'"><a href="#" >'+currentTab.title+'<i class="fa icon-remove-circle"></i></a></li>').appendTo($tabs);
    $li.data('original',currentTab);
  }
  /**
   * 初始化数据 
   */
  function initData(jq){
    var state = jq.data('scrolltabs'), //$.data(jq[0],'scrolltabs'),
        $tabs = state.tabs,
        opts = state.opts;
    //初始化标签页数据 
    if(opts.tabs && opts.tabs.length > 0){
      for(var i=0;i<opts.tabs.length;i++){
        var currentTab = opts.tabs[i];
        var $li = $('<li title="'+currentTab.title+'" tabId="'+currentTab.id+'" tabIndex="'+i+'"><a href="#" >'+currentTab.title+'<i class="fa icon-remove-circle"></i></a></li>').appendTo($tabs);
        $li.data('original',currentTab);
      }
      //首个标签页选中
      $tabs.find('li:first').addClass('selected');
    }
  }
  /*
   * private method 获取选中的标签页
   * 先根据 id 获取,获取不到就根据标题来获取 
   */
  function findTab(jq,which){
    var state = jq.data('scrolltabs'),
        $tabs = state.tabs;
    var selectTab = $tabs.find('li[tabid='+which+']');
    if(selectTab.size() == 0){
      selectTab = $tabs.find('li[title='+which+']');
    }
    return selectTab;
  }
  /*
   * private method
   * 传入一个 jquery 元素集合,计算总宽度
   */
  function elsWidth($els) {
    var sumWidth = 0;
    $els.each(function() {
      sumWidth += $(this).outerWidth(true);
    });
    return sumWidth;
  }
  /**
   * 存在返回真,不存在返回假
   */
  function existTab(jq,which){
    return findTab(jq, which).size() != 0;
  }
  /**
   * 标签页选择
   * which id or title 
   * 首先使用 id 来选择
   */
  function selectTab(jq,which){
    var selectTab = findTab(jq, which);
    selectTab.addClass('selected');
    selectTab.siblings().removeClass('selected');
  }
  /**
   * 显示选中的标签页
   */
  function showActive(jq){
    
  }
  /**
   * 标签页关闭
   */
  function closeTab(jq,which){
    var currentTab = findTab(jq, which);
    if(currentTab.hasClass('selected')){
      //如果关闭的是选中的标签,应该选择下一个标签选中;如果下一个没有,则选择前一个选中
      var $nextSelectTab = currentTab.next();
      if($nextSelectTab.size() == 0){
        $nextSelectTab = currentTab.prev();
      }
      selectTab(jq,$nextSelectTab.attr('tabid'));
    }
    currentTab.remove();
  }
  /**
   * 关闭所有标签页
   */
  function closeAll(jq){
    var state = jq.data('scrolltabs'),
        $tabs = state.tabs;
    $tabs.find('li').each(function(){
      var tabid = $(this).attr('tabid');
      closeTab(jq, tabid);
    });
  }
  /**
   * 关闭其它标签页
   */
  function closeOther(jq,which){
    var state = jq.data('scrolltabs'),
        $tabs = state.tabs;
    var currentTab = findTab(jq, which);
    $tabs.find('li').not(currentTab).each(function(){
      var tabid = $(this).attr('tabid');
      closeTab(jq, tabid);
    });
  }
  /**
   * 向左滚动
   */
  function leftScroll(jq){
    var state = jq.data('scrolltabs'),
        $tabs = state.tabs,
        opts = state.opts;
    //标签页总宽度不大于显示区宽度,不需要移动
    if($tabs.width() < state.showWidth){   
      return ;
    }
    var currentOffset = Math.abs(parseInt($tabs.css("margin-left"))); //当前的偏移值
    /*如果包含有所有标签页的宽度大于了 nav 宽度,则这样处理
     * 1.先看所有标签已经超出父元素多少了,即 currentOffset,此时是个负值 Math.abs 转为正值
     * 2.从第一个标签开始统计宽度,直到所有的宽度和能够在显示区显示出来,即宽度和大于  tabsContentMarginLeft
     * 3.所有标签有可能有几页,即前面所有的标签不在显示区一屏显示得下,如果显示得下,直接 marginLeft 设置为 0 就好了
     * 如果显示不下,则 marginLeft 还是一个负值,下面则是计算要还要负多少
     * 3.1,又从当前的 tab 住前推,直到刚好一屏的内容,然后 marginLeft 则为这个 元素前面标签的宽度总和
    */
    var $currentTab = $tabs.find('li:first'),sumWidth = 0;
    while ((sumWidth + $currentTab.outerWidth(true)) <= currentOffset) {
      sumWidth += $currentTab.outerWidth(true);
      $currentTab = $currentTab.next()
    }
    sumWidth = 0;
    var prevWidth = 0;
    if (elsWidth($currentTab.prevAll()) > state.showWidth) {
      //如果前面的标签在一个显示区显示不下,即还有好几页的情况
      while ((sumWidth + $currentTab.outerWidth(true)) < (state.showWidth) && $currentTab.length > 0) {
        sumWidth += $currentTab.outerWidth(true);
        $currentTab = $currentTab.prev();
      }
      prevWidth = elsWidth($currentTab.prevAll());
    }
    $tabs.animate({
      marginLeft: 0 - prevWidth + "px"
    }, opts.scrollDuration);
  }
  /**
   * 向右滚动
   * .content-tabs 是导航区的宽度
   * 它的实现方式 是用一个固定宽度的 div 包裹一个很宽的 div  .page-tabs,
   * 然后所有的标签页在此 div 中显示,用一个 .page-tabs-content 来包裹不设置宽度,由标签页来充大,所有 page-tabs-content 代表了当前所有标签页的宽度
   */
  function rightScroll(jq){
    var state = jq.data('scrolltabs'),
        $tabs = state.tabs,
        opts = state.opts;
    if($tabs.width(true) < state.showWidth){   //标签页总宽度不大于显示区宽度,不需要移动
      return ;
    }
    var currentOffset = Math.abs(parseInt($tabs.css("margin-left"))); //当前的偏移值
    
    //先找到第一个能显示的标签页
    var $currentTab = $tabs.find('li:first'),sumWidth = 0;
    while ((sumWidth + $currentTab.outerWidth(true)) <= currentOffset) {
      sumWidth += $currentTab.outerWidth(true);
      $currentTab = $currentTab.next()
    }
    
    //然后从第一个能显示的标签页向推,直到最后一个显示的标签页的后一个标签页,然后设置 偏移为当前标签页的前面标签页的宽度
    sumWidth = 0;
    while ((sumWidth + $currentTab.outerWidth(true)) < (state.showWidth) && $currentTab.length > 0) {
      sumWidth += $currentTab.outerWidth(true);
      $currentTab = $currentTab.next()
    }
    var prevWidth = elsWidth($currentTab.prevAll());
    if (prevWidth > 0) {
      $tabs.animate({
        marginLeft: 0 - prevWidth + "px"
      }, opts.scrollDuration)
    }
  }
  /**
   * 事件绑定
   */
  function bindEvents(jq){
    var state = jq.data('scrolltabs'),
        $navLeft = jq.find('.tabs-nav.nav-left'),
        $navRight = jq.find('.tabs-nav.nav-right'),
        $tabs = state.tabs,
        opts = state.opts;
    
    var EVENTS=[{selector:$navLeft,types:['click'],handler:function(e){
      leftScroll(jq);
    }},
    {selector:$navRight,types:['click'],handler:function(e){
      rightScroll(jq);
    }},
    {parent:$tabs,selector:'li>a>i',types:['click'],handler:function(e){
      var $tab = $(e.target).closest('li'),
          id = $tab.attr('tabid');
      closeTab(jq,id);
      if(opts.onClose && $.isFunction(opts.onClose)){
        opts.onClose.call(jq,id,$tab);
      }
    }},
    {parent:$tabs,selector:'li',types:['click'],handler:function(e){
      var $tab = $(e.target).closest('li'),
          id = $tab.attr('tabid');
      selectTab(jq, id);
      if(opts.onSelect && $.isFunction(opts.onSelect)){
        opts.onSelect.call(jq,id,$tab);
      }
    }},
    {parent:$tabs,selector:'li',types:['dblclick'],handler:opts.onDblClickTab}];
    regPageEvents(EVENTS);
  }
  
  /**
   * 插件定义
   */
  $.fn.scrolltabs = function(options,params){
    if(typeof options == 'string'){
      var method = $.fn.scrolltabs.methods[options];
      if(method){
        return method(this,params);
      }
      return ;
    }
    options = options || {};
    return this.each(function(){
      var state = $.data(this,'scrolltabs'),$this= $(this);
      if(state){
          $.extend(state.opts,options);
      }else{
          state = $.extend({}, $.fn.scrolltabs.defaults,options);
          state = $.data(this,'scrolltabs', $.extend({opts:state},init($(this),state)));
      }
      bindEvents($this);
      initData($this);
   });
  }
  
  $.fn.scrolltabs.methods={
      options:function(jq){
        var state = jq.data('scrolltabs');
        return state.opts;
      },
      add:function(jq,tab,title){
        addTab(jq, tab,title);
      },
      close:function(jq,which){
        closeTab(jq, which);
      },
      select:function(jq,which){
        selectTab(jq,which);
      },
      exist:function(jq,which){
        existTab(jq,which);
      }
  };
  $.fn.scrolltabs.defaults={
    fit:true,
    width:'100%',
    scrollDuration:400,
    tabs:[],              //所有的标签页配置
    onContextMenu:function(e,id,tab){},
    onSelect:function(id,tab){},
    onUnselect:function(id,tab){},
    onBeforeClose:function(id,tab){return true;},
    onClose:function(id,tab){},
    onDblClickTab:function(id,tab){}
  }
})(window.jQuery)