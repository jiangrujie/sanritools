IOFileFilter fileFilter = FileFilterUtils.and(FileFileFilter.FILE,new SuffixFileFilter(".class"));
		File classDir = new File(PathUtil.classPath());
		Iterator<File> iterateFiles = FileUtils.iterateFiles(classDir, fileFilter,TrueFileFilter.INSTANCE );
		ClassLoader classLoader = BeanUtil.class.getClassLoader();
		Class<? extends ClassLoader> clazz = classLoader.getClass();
		while(clazz != ClassLoader.class){
			clazz = (Class<? extends ClassLoader>) clazz.getSuperclass();
		}
        try {
        	Field field = clazz.getDeclaredField("classes");
        	field.setAccessible(true);
			Vector<Class<?>> classesList = (Vector<Class<?>>) field.get(classLoader);
			System.out.println(classesList.size());
			Iterator<Class<?>> iterator = classesList.iterator();
			while(iterator.hasNext()){
				Class<?> next = iterator.next();
				System.out.println(next);
			}
		} catch (IllegalArgumentException e) {
			e.printStackTrace();
		} catch (IllegalAccessException e) {
			e.printStackTrace();
		} catch (NoSuchFieldException e) {
			e.printStackTrace();
		} catch (SecurityException e) {
			e.printStackTrace();
		}
        int count = 0;
		while(iterateFiles.hasNext()){
			File next = iterateFiles.next();
			System.out.println(next);
			count++;
		}
		System.out.println(count);